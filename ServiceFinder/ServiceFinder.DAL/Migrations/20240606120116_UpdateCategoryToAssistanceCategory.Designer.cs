// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceFinder.DAL;

#nullable disable

namespace ServiceFinder.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240606120116_UpdateCategoryToAssistanceCategory")]
    partial class UpdateCategoryToAssistanceCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceFinder.DAL.Entites.AssistanceCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AssistanceCategories");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.AssistanceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssistanceCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssistanceCategoryId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Assistances");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.ReviewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssistanceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssistanceId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.UserProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("text");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.AssistanceEntity", b =>
                {
                    b.HasOne("ServiceFinder.DAL.Entites.AssistanceCategoryEntity", "AssistanceCategory")
                        .WithMany("Assistances")
                        .HasForeignKey("AssistanceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceFinder.DAL.Entites.UserProfileEntity", "UserProfile")
                        .WithMany("Assistances")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssistanceCategory");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.ReviewEntity", b =>
                {
                    b.HasOne("ServiceFinder.DAL.Entites.AssistanceEntity", "Assistance")
                        .WithMany("Reviews")
                        .HasForeignKey("AssistanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceFinder.DAL.Entites.UserProfileEntity", "UserProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistance");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.AssistanceCategoryEntity", b =>
                {
                    b.Navigation("Assistances");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.AssistanceEntity", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ServiceFinder.DAL.Entites.UserProfileEntity", b =>
                {
                    b.Navigation("Assistances");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
